export const questions = {
  javascript: [
    { id: 1, text: "Explain how closures work in JavaScript.", keywords: ["closure", "scope", "function"], solution: "A closure is a function that retains access to its outer scope’s variables even after the outer function has finished executing. Example: `function outer() { let x = 10; return function inner() { console.log(x); }; } const fn = outer(); fn(); // Logs 10`." },
    { id: 2, text: "What is the difference between 'let', 'const', and 'var'?", keywords: ["let", "const", "var"], solution: "`var` is function-scoped and hoisted, `let` is block-scoped and not hoisted, `const` is block-scoped and immutable (but object properties can change). Example: `var x = 1; { let y = 2; const z = 3; } console.log(x); // 1, y/z undefined`." },
    { id: 3, text: "How does event delegation work?", keywords: ["event", "delegation"], solution: "Event delegation uses event bubbling to handle events on child elements via a parent. Example: `document.querySelector('ul').addEventListener('click', (e) => { if (e.target.tagName === 'LI') console.log(e.target.textContent); });`." },
    { id: 4, text: "What is a Promise in JavaScript?", keywords: ["promise", "async"], solution: "A Promise is an object representing the eventual completion or failure of an async operation. Example: `const p = new Promise((resolve) => setTimeout(() => resolve('Done'), 1000)); p.then(console.log);`." },
    { id: 5, text: "Explain 'this' keyword behavior.", keywords: ["this", "context"], solution: "`this` refers to the object executing the function. In global scope, it’s `window`; in methods, it’s the object. Example: `const obj = { x: 1, getX() { return this.x; } }; console.log(obj.getX()); // 1`." },
    { id: 6, text: "What is prototypal inheritance?", keywords: ["prototype", "inheritance"], solution: "Objects inherit properties from other objects via the prototype chain. Example: `function Dog() {}; Dog.prototype.bark = () => 'Woof'; const d = new Dog(); d.bark(); // Woof`." },
    { id: 7, text: "How does `map` work in JavaScript?", keywords: ["map", "array"], solution: "`map` creates a new array by applying a function to each element. Example: `[1, 2, 3].map(x => x * 2); // [2, 4, 6]`." },
    { id: 8, text: "What is the difference between `==` and `===`?", keywords: ["equality", "strict"], solution: "`==` performs type coercion, `===` checks value and type. Example: `5 == '5' // true, 5 === '5' // false`." },
    { id: 9, text: "What are arrow functions?", keywords: ["arrow", "function"], solution: "Arrow functions are concise and don’t bind their own `this`. Example: `const add = (a, b) => a + b; add(2, 3); // 5`." },
    { id: 10, text: "Explain async/await.", keywords: ["async", "await"], solution: "`async` declares an async function, `await` pauses for a Promise. Example: `async function fetchData() { const data = await fetch(url); return data; }`." },
    { id: 11, text: "What is hoisting?", keywords: ["hoisting", "scope"], solution: "Hoisting lifts `var` and function declarations to the top of their scope. Example: `console.log(x); var x = 5; // undefined`." },
    { id: 12, text: "What is the difference between `null` and `undefined`?", keywords: ["null", "undefined"], solution: "`null` is an intentional absence of value, `undefined` is uninitialized. Example: `let x = null; let y; console.log(y); // undefined`." },
    { id: 13, text: "How does `setTimeout` work?", keywords: ["setTimeout", "async"], solution: "`setTimeout` delays execution. Example: `setTimeout(() => console.log('Hi'), 1000); // Logs after 1s`." },
    { id: 14, text: "What is a higher-order function?", keywords: ["higher-order", "function"], solution: "A function that takes or returns a function. Example: `const withLog = fn => (...args) => { console.log('Calling'); return fn(...args); };`." },
    { id: 15, text: "What is the purpose of `bind`?", keywords: ["bind", "this"], solution: "`bind` sets `this` for a function. Example: `const obj = { x: 1 }; const fn = function() { return this.x; }.bind(obj); fn(); // 1`." },
    { id: 16, text: "Explain the difference between `slice` and `splice`.", keywords: ["slice", "splice"], solution: "`slice` returns a copy, `splice` modifies the array. Example: `[1, 2, 3].slice(1, 2); // [2], [1, 2, 3].splice(1, 1); // [2], array becomes [1, 3]`." },
    { id: 17, text: "What is event bubbling?", keywords: ["event", "bubbling"], solution: "Events propagate from child to parent. Example: `<div onclick='log'><button>Click</button></div>` triggers both." },
    { id: 18, text: "What are template literals?", keywords: ["template", "literals"], solution: "Strings with embedded expressions. Example: `let x = 5; console.log(`Value: ${x}`); // Value: 5`." },
    { id: 19, text: "What is the purpose of `Object.keys`?", keywords: ["object", "keys"], solution: "Returns an array of object keys. Example: `Object.keys({ a: 1, b: 2 }); // ['a', 'b']`." },
    { id: 20, text: "What is a JavaScript module?", keywords: ["module", "import"], solution: "A file with exportable code. Example: `export const x = 5; // module.js`, `import { x } from './module.js';`." },
  ],
  react: [
    { id: 1, text: "What are React hooks?", keywords: ["hooks", "useState"], solution: "Hooks are functions that let you use state and lifecycle features in functional components. Example: `const [count, setCount] = useState(0);` adds state to a component." },
    { id: 2, text: "Difference between class and functional components?", keywords: ["class", "functional"], solution: "Class components use `class` syntax with `this` and lifecycle methods; functional components are simpler functions with hooks. Example: `class MyClass extends React.Component { render() { return <div />; } }` vs `const MyFunc = () => <div />;`." },
    { id: 3, text: "How does React handle state management?", keywords: ["state", "props"], solution: "State is managed with `useState` or `setState` and passed via props. Example: `const [value, setValue] = useState(''); <Child value={value} />;`." },
    { id: 4, text: "What is the purpose of useEffect?", keywords: ["useEffect", "side-effect"], solution: "`useEffect` handles side effects like data fetching. Example: `useEffect(() => { fetchData(); }, []);` runs on mount." },
    { id: 5, text: "What is JSX?", keywords: ["jsx", "syntax"], solution: "JSX is a syntax extension for JavaScript that looks like HTML. Example: `const element = <h1>Hello</h1>;` compiles to `React.createElement('h1', null, 'Hello');`." },
    { id: 6, text: "What is a React component?", keywords: ["component", "reuse"], solution: "A reusable UI piece. Example: `const Button = () => <button>Click</button>;`." },
    { id: 7, text: "What is the virtual DOM?", keywords: ["virtual", "dom"], solution: "A lightweight copy of the DOM for efficient updates. React diffs it with the real DOM. Example: `<div>{state}</div>` triggers diffing." },
    { id: 8, text: "How do you pass props?", keywords: ["props", "data"], solution: "Props are passed as attributes. Example: `<Child name='John' />`, `const Child = ({ name }) => <p>{name}</p>;`." },
    { id: 9, text: "What is the purpose of `key` in lists?", keywords: ["key", "list"], solution: "`key` helps React identify items. Example: `{items.map(item => <li key={item.id}>{item.name}</li>)}`." },
    { id: 10, text: "What is useReducer?", keywords: ["useReducer", "state"], solution: "Manages complex state. Example: `const [state, dispatch] = useReducer(reducer, initialState);`." },
    { id: 11, text: "What are controlled components?", keywords: ["controlled", "form"], solution: "Form elements tied to state. Example: `<input value={value} onChange={e => setValue(e.target.value)} />`." },
    { id: 12, text: "What is React Router?", keywords: ["router", "navigation"], solution: "A library for routing. Example: `<Route path='/home' component={Home} />`." },
    { id: 13, text: "What is the Context API?", keywords: ["context", "state"], solution: "Shares state globally. Example: `const MyContext = createContext(); <MyContext.Provider value={value}>`." },
    { id: 14, text: "What is a higher-order component?", keywords: ["hoc", "reuse"], solution: "A function that enhances a component. Example: `const withData = Comp => props => <Comp {...props} data={data} />;`." },
    { id: 15, text: "How do you optimize React performance?", keywords: ["optimize", "performance"], solution: "Use `React.memo`, `useCallback`, lazy loading. Example: `const MemoComp = React.memo(Comp);`." },
    { id: 16, text: "What is prop drilling?", keywords: ["prop", "drilling"], solution: "Passing props through multiple layers. Example: `<A><B><C prop={value} /></B></A>`." },
    { id: 17, text: "What is useMemo?", keywords: ["useMemo", "performance"], solution: "Memoizes values. Example: `const result = useMemo(() => expensiveCalc(x), [x]);`." },
    { id: 18, text: "What is the difference between `state` and `props`?", keywords: ["state", "props"], solution: "`state` is internal and mutable, `props` are external and immutable. Example: `this.setState({ x: 1 }); <Comp x={1} />`." },
    { id: 19, text: "What are fragments?", keywords: ["fragments", "jsx"], solution: "Group elements without extra nodes. Example: `<><div>1</div><div>2</div></>`." },
    { id: 20, text: "What is React.lazy?", keywords: ["lazy", "loading"], solution: "Lazy loads components. Example: `const LazyComp = React.lazy(() => import('./Comp'));`." },
  ],
  python: [
    { id: 1, text: "What is a Python decorator?", keywords: ["decorator", "function"], solution: "A decorator is a function that modifies another function’s behavior. Example: `def deco(func): return lambda: func() + 1; @deco def num(): return 5; print(num()) # 6`." },
    { id: 2, text: "Explain list comprehensions.", keywords: ["list", "comprehension"], solution: "List comprehensions create lists concisely. Example: `[x * 2 for x in range(5)] # [0, 2, 4, 6, 8]`." },
    { id: 3, text: "How does Python handle exceptions?", keywords: ["try", "except"], solution: "Use `try/except`. Example: `try: x = 1 / 0; except ZeroDivisionError: print('Error');`." },
    { id: 4, text: "What are Python generators?", keywords: ["generator", "yield"], solution: "Generators yield values one at a time. Example: `def gen(): yield 1; yield 2; for x in gen(): print(x); # 1, 2`." },
    { id: 5, text: "What is the difference between `list` and `tuple`?", keywords: ["list", "tuple"], solution: "`list` is mutable, `tuple` is immutable. Example: `l = [1, 2]; l[0] = 3; t = (1, 2); t[0] = 3 # Error`." },
    { id: 6, text: "What is a lambda function?", keywords: ["lambda", "anonymous"], solution: "An anonymous function. Example: `add = lambda x, y: x + y; print(add(2, 3)); # 5`." },
    { id: 7, text: "How does Python implement OOP?", keywords: ["oop", "class"], solution: "With classes and inheritance. Example: `class Dog: def bark(self): return 'Woof'; class Pug(Dog): pass; p = Pug(); p.bark(); # Woof`." },
    { id: 8, text: "What is the `global` keyword?", keywords: ["global", "scope"], solution: "Accesses global variables. Example: `x = 1; def fn(): global x; x = 2; fn(); print(x); # 2`." },
    { id: 9, text: "What are Python modules?", keywords: ["module", "import"], solution: "Files with reusable code. Example: `import math; print(math.sqrt(16)); # 4`." },
    { id: 10, text: "What is a dictionary comprehension?", keywords: ["dictionary", "comprehension"], solution: "Creates dictionaries concisely. Example: `{x: x*2 for x in range(3)} # {0: 0, 1: 2, 2: 4}`." },
    { id: 11, text: "What is the difference between `deep` and `shallow` copy?", keywords: ["copy", "deep"], solution: "`shallow` copies top-level, `deep` copies all levels. Example: `import copy; a = [[1]]; b = copy.deepcopy(a); b[0][0] = 2; print(a); # [[1]]`." },
    { id: 12, text: "What is `__init__` in Python?", keywords: ["init", "class"], solution: "Constructor method. Example: `class Person: def __init__(self, name): self.name = name; p = Person('John');`." },
    { id: 13, text: "What are Python’s built-in data types?", keywords: ["data", "types"], solution: "Includes `int`, `str`, `list`, `dict`, etc. Example: `x = 5; y = 'hi'; z = [1, 2];`." },
    { id: 14, text: "What is a `set` in Python?", keywords: ["set", "unique"], solution: "An unordered collection of unique items. Example: `s = {1, 1, 2}; print(s); # {1, 2}`." },
    { id: 15, text: "How do you handle file I/O in Python?", keywords: ["file", "io"], solution: "Use `open`. Example: `with open('file.txt', 'w') as f: f.write('Hi');`." },
    { id: 16, text: "What is the `map` function?", keywords: ["map", "function"], solution: "Applies a function to iterables. Example: `list(map(lambda x: x*2, [1, 2])); # [2, 4]`." },
    { id: 17, text: "What is a `staticmethod`?", keywords: ["static", "method"], solution: "A method not bound to instance. Example: `class C: @staticmethod def f(): return 5; print(C.f()); # 5`." },
    { id: 18, text: "What is PEP 8?", keywords: ["pep8", "style"], solution: "Python’s style guide. Example: Use 4 spaces for indentation, not tabs." },
    { id: 19, text: "What is the difference between `range` and `xrange`?", keywords: ["range", "xrange"], solution: "In Python 2, `range` returns a list, `xrange` a generator; Python 3 uses `range` as a generator. Example: `list(range(3)); # [0, 1, 2]`." },
    { id: 20, text: "What is a virtual environment?", keywords: ["virtual", "env"], solution: "Isolates Python dependencies. Example: `python -m venv myenv; source myenv/bin/activate`." },
  ],
  hr: [
    { id: 1, text: "Tell me about yourself.", keywords: ["background", "experience"], solution: "I’m a passionate developer with X years of experience in Y, skilled in Z, and eager to contribute to innovative projects." },
    { id: 2, text: "What are your strengths?", keywords: ["strengths", "skills"], solution: "My strengths include problem-solving, teamwork, and adaptability, demonstrated by [example]." },
    { id: 3, text: "Why do you want this job?", keywords: ["motivation", "company"], solution: "I’m drawn to this role because of [company value] and my alignment with [specific skill/role]." },
    { id: 4, text: "Describe a challenge you faced.", keywords: ["challenge", "solution"], solution: "I faced [issue], tackled it by [action], and achieved [result]." },
    { id: 5, text: "Where do you see yourself in 5 years?", keywords: ["goals", "growth"], solution: "In 5 years, I aim to be a [role] contributing to [goal] while growing my skills in [area]." },
    { id: 6, text: "What is your greatest weakness?", keywords: ["weakness", "improvement"], solution: "I tend to [weakness], but I’m improving by [action]. Example: I overanalyze, but I set deadlines to stay efficient." },
    { id: 7, text: "Why should we hire you?", keywords: ["value", "skills"], solution: "I bring [skill/experience] that aligns with [company need], proven by [example]." },
    { id: 8, text: "How do you handle pressure?", keywords: ["pressure", "stress"], solution: "I prioritize tasks and stay calm. Example: Under a tight deadline, I broke tasks into steps and delivered on time." },
    { id: 9, text: "What motivates you?", keywords: ["motivation", "drive"], solution: "I’m motivated by solving problems and learning. Example: Completing a tough project keeps me engaged." },
    { id: 10, text: "How do you work in a team?", keywords: ["teamwork", "collaboration"], solution: "I communicate clearly and support teammates. Example: I collaborated on [project] to meet goals." },
    { id: 11, text: "What’s your salary expectation?", keywords: ["salary", "expectation"], solution: "I’m looking for a range of [X-Y], based on my skills and market rates, but I’m open to discussion." },
    { id: 12, text: "Why are you leaving your current job?", keywords: ["reason", "career"], solution: "I’m seeking new challenges and growth opportunities that align with [new role]." },
    { id: 13, text: "What do you know about our company?", keywords: ["company", "research"], solution: "I know [company fact] and admire [value/product]. I’d love to contribute to [goal]." },
    { id: 14, text: "How do you handle conflict?", keywords: ["conflict", "resolution"], solution: "I address issues directly and calmly. Example: I resolved a disagreement by finding common ground." },
    { id: 15, text: "What’s your proudest achievement?", keywords: ["achievement", "success"], solution: "I’m proud of [achievement] because it required [skill] and resulted in [impact]." },
    { id: 16, text: "How do you prioritize tasks?", keywords: ["prioritize", "time"], solution: "I assess urgency and impact. Example: I use tools like [tool] to manage deadlines." },
    { id: 17, text: "What’s your management style?", keywords: ["management", "style"], solution: "I focus on clear goals and support. Example: I delegate tasks while ensuring team input." },
    { id: 18, text: "How do you stay updated?", keywords: ["learning", "skills"], solution: "I follow [resource] and practice with projects. Example: I learned [skill] via [method]." },
    { id: 19, text: "What questions do you have for us?", keywords: ["questions", "interest"], solution: "I’d ask: How does the team approach [goal]? What’s the biggest challenge ahead?" },
    { id: 20, text: "How do you adapt to change?", keywords: ["adapt", "change"], solution: "I stay flexible and proactive. Example: I adapted to [change] by [action]." },
  ],
  html: [
    { id: 1, text: "What is semantic HTML?", keywords: ["semantic", "tags"], solution: "Semantic HTML uses tags like `<article>`, `<nav>` to describe content meaning. Example: `<header><nav>Home</nav></header>`." },
    { id: 2, text: "Explain the difference between `div` and `section`.", keywords: ["div", "section"], solution: "`div` is a generic container; `section` groups thematic content. Example: `<section><h1>Blog</h1></section>` vs `<div>Generic</div>`." },
    { id: 3, text: "What is the `<!DOCTYPE>` declaration?", keywords: ["doctype", "html"], solution: "It declares the document type as HTML5. Example: `<!DOCTYPE html>`." },
    { id: 4, text: "What are meta tags?", keywords: ["meta", "tags"], solution: "They provide metadata. Example: `<meta charset='UTF-8'>` sets character encoding." },
    { id: 5, text: "What is the purpose of the `alt` attribute?", keywords: ["alt", "image"], solution: "It provides text for screen readers if an image fails. Example: `<img src='pic.jpg' alt='Dog'>`." },
    { id: 6, text: "What is a `<form>` element?", keywords: ["form", "input"], solution: "It collects user input. Example: `<form><input type='text'></form>`." },
    { id: 7, text: "What is the `data-` attribute?", keywords: ["data", "attribute"], solution: "Stores custom data. Example: `<div data-id='1'>Item</div>`." },
    { id: 8, text: "What is the difference between `id` and `class`?", keywords: ["id", "class"], solution: "`id` is unique, `class` can be reused. Example: `<div id='one'>` vs `<div class='many'>`." },
    { id: 9, text: "What is an HTML entity?", keywords: ["entity", "symbol"], solution: "Special characters like `&lt;` for `<`. Example: `&copy;` renders ©." },
    { id: 10, text: "What is the `<canvas>` element?", keywords: ["canvas", "graphics"], solution: "It draws graphics via JavaScript. Example: `<canvas id='myCanvas'></canvas>`." },
    { id: 11, text: "What is the `<iframe>` tag?", keywords: ["iframe", "embed"], solution: "Embeds another page. Example: `<iframe src='url'></iframe>`." },
    { id: 12, text: "What is the `title` attribute?", keywords: ["title", "tooltip"], solution: "Shows a tooltip. Example: `<span title='Hi'>Hover</span>`." },
    { id: 13, text: "What is the `<link>` tag?", keywords: ["link", "css"], solution: "Links external resources. Example: `<link rel='stylesheet' href='style.css'>`." },
    { id: 14, text: "What is the `<script>` tag?", keywords: ["script", "js"], solution: "Embeds JavaScript. Example: `<script src='app.js'></script>`." },
    { id: 15, text: "What is the `target` attribute?", keywords: ["target", "link"], solution: "Specifies link behavior. Example: `<a href='url' target='_blank'>Open</a>` opens in new tab." },
    { id: 16, text: "What is the `<video>` tag?", keywords: ["video", "media"], solution: "Embeds video. Example: `<video src='movie.mp4' controls></video>`." },
    { id: 17, text: "What is the `<audio>` tag?", keywords: ["audio", "media"], solution: "Embeds audio. Example: `<audio src='song.mp3' controls></audio>`." },
    { id: 18, text: "What is the `rel` attribute?", keywords: ["rel", "link"], solution: "Defines relationship. Example: `<a href='url' rel='noopener'>Link</a>`." },
    { id: 19, text: "What are HTML5 semantic elements?", keywords: ["html5", "semantic"], solution: "Tags like `<header>`, `<footer>`, `<main>`. Example: `<main><article>Content</article></main>`." },
    { id: 20, text: "What is the `aria-` attribute?", keywords: ["aria", "accessibility"], solution: "Enhances accessibility. Example: `<button aria-label='Close'>X</button>`." },
  ],
  css: [
    { id: 1, text: "What is the box model?", keywords: ["box", "margin"], solution: "The box model includes content, padding, border, and margin. Example: `div { margin: 10px; padding: 5px; border: 1px solid; }`." },
    { id: 2, text: "How does Flexbox work?", keywords: ["flexbox", "layout"], solution: "Flexbox arranges items in a container. Example: `div { display: flex; justify-content: space-between; }`." },
    { id: 3, text: "What is the difference between `relative` and `absolute` positioning?", keywords: ["position", "relative"], solution: "`relative` moves from original position, `absolute` from parent. Example: `.rel { position: relative; top: 10px; } .abs { position: absolute; top: 10px; }`." },
    { id: 4, text: "What is a CSS selector?", keywords: ["selector", "css"], solution: "Targets elements. Example: `.class`, `#id`, `div > p` selects direct children." },
    { id: 5, text: "What is the `z-index` property?", keywords: ["z-index", "stack"], solution: "Controls stacking order. Example: `div { z-index: 10; position: absolute; }`." },
    { id: 6, text: "What is a media query?", keywords: ["media", "query"], solution: "Applies styles based on conditions. Example: `@media (max-width: 600px) { div { font-size: 14px; } }`." },
    { id: 7, text: "What is the `display` property?", keywords: ["display", "layout"], solution: "Defines element rendering. Example: `display: block;` vs `display: inline;`." },
    { id: 8, text: "What is CSS Grid?", keywords: ["grid", "layout"], solution: "A 2D layout system. Example: `div { display: grid; grid-template-columns: 1fr 1fr; }`." },
    { id: 9, text: "What is the `float` property?", keywords: ["float", "layout"], solution: "Moves elements left/right. Example: `img { float: left; }`." },
    { id: 10, text: "What is specificity in CSS?", keywords: ["specificity", "rules"], solution: "Determines style precedence. Example: `#id` (100) beats `.class` (10)." },
    { id: 11, text: "What is the `!important` rule?", keywords: ["important", "override"], solution: "Overrides other styles. Example: `color: red !important;`." },
    { id: 12, text: "What are pseudo-classes?", keywords: ["pseudo", "class"], solution: "Styles based on state. Example: `a:hover { color: blue; }`." },
    { id: 13, text: "What is the `transition` property?", keywords: ["transition", "animation"], solution: "Smooths property changes. Example: `div { transition: all 0.3s; }`." },
    { id: 14, text: "What is the `transform` property?", keywords: ["transform", "style"], solution: "Alters element appearance. Example: `div { transform: rotate(45deg); }`." },
    { id: 15, text: "What is the difference between `em` and `rem`?", keywords: ["em", "rem"], solution: "`em` is relative to parent font-size, `rem` to root. Example: `html { font-size: 16px; } div { font-size: 1.5rem; } // 24px`." },
    { id: 16, text: "What is a CSS preprocessor?", keywords: ["preprocessor", "sass"], solution: "Extends CSS (e.g., Sass). Example: `$color: red; div { color: $color; }`." },
    { id: 17, text: "What is the `opacity` property?", keywords: ["opacity", "transparency"], solution: "Sets transparency. Example: `div { opacity: 0.5; }`." },
    { id: 18, text: "What is the `box-shadow` property?", keywords: ["box-shadow", "effect"], solution: "Adds shadows. Example: `div { box-shadow: 2px 2px 5px gray; }`." },
    { id: 19, text: "What is the `calc` function?", keywords: ["calc", "css"], solution: "Performs calculations. Example: `width: calc(100% - 20px);`." },
    { id: 20, text: "What are CSS variables?", keywords: ["variables", "custom"], solution: "Reusable values. Example: `:root { --color: blue; } div { color: var(--color); }`." },
  ],
  backend: [
    { id: 1, text: "What is REST?", keywords: ["rest", "api"], solution: "REST is an architectural style for APIs using HTTP methods (GET, POST). Example: `GET /users` retrieves user data." },
    { id: 2, text: "What is an API?", keywords: ["api", "interface"], solution: "An interface for software communication. Example: `fetch('/api/data')` calls an API." },
    { id: 3, text: "What is HTTP?", keywords: ["http", "protocol"], solution: "A protocol for web data transfer. Example: `GET /page` requests a resource." },
    { id: 4, text: "What is a server?", keywords: ["server", "backend"], solution: "A system handling requests. Example: Node.js `http.createServer()`." },
    { id: 5, text: "What is middleware?", keywords: ["middleware", "request"], solution: "Functions processing requests. Example: `app.use((req, res, next) => next());`." },
    { id: 6, text: "What is CORS?", keywords: ["cors", "security"], solution: "Cross-Origin Resource Sharing allows resource sharing. Example: `Access-Control-Allow-Origin: *`." },
    { id: 7, text: "What is authentication?", keywords: ["auth", "security"], solution: "Verifies user identity. Example: JWT token in headers." },
    { id: 8, text: "What is authorization?", keywords: ["auth", "access"], solution: "Determines access rights. Example: `if (user.role === 'admin')`." },
    { id: 9, text: "What is a database?", keywords: ["database", "data"], solution: "Organized data storage. Example: MySQL `SELECT * FROM users;`." },
    { id: 10, text: "What is SQL injection?", keywords: ["sql", "security"], solution: "Malicious SQL code. Prevent with prepared statements: `db.query('SELECT ? FROM users', [id]);`." },
    { id: 11, text: "What is MVC?", keywords: ["mvc", "architecture"], solution: "Model-View-Controller separates logic. Example: Express routes as controllers." },
    { id: 12, text: "What is a microservice?", keywords: ["microservice", "architecture"], solution: "Small, independent services. Example: Separate user and payment APIs." },
    { id: 13, text: "What is load balancing?", keywords: ["load", "balancing"], solution: "Distributes traffic. Example: Nginx proxy to multiple servers." },
    { id: 14, text: "What is caching?", keywords: ["cache", "performance"], solution: "Stores data for quick access. Example: Redis `set('key', 'value')`." },
    { id: 15, text: "What is a webhook?", keywords: ["webhook", "event"], solution: "Event-driven HTTP callback. Example: POST to URL on user signup." },
    { id: 16, text: "What is HTTPS?", keywords: ["https", "security"], solution: "Secure HTTP with SSL/TLS. Example: `https://site.com` encrypts data." },
    { id: 17, text: "What is a status code?", keywords: ["status", "http"], solution: "Indicates request outcome. Example: `200 OK`, `404 Not Found`." },
    { id: 18, text: "What is a session?", keywords: ["session", "state"], solution: "Maintains user state. Example: `req.session.user = user;`." },
    { id: 19, text: "What is ORM?", keywords: ["orm", "database"], solution: "Object-Relational Mapping. Example: Sequelize `User.findAll()`." },
    { id: 20, text: "What is serverless?", keywords: ["serverless", "cloud"], solution: "Runs code without managing servers. Example: AWS Lambda function." },
  ],
  nodejs: [
    { id: 1, text: "What is the event loop in Node.js?", keywords: ["event", "loop"], solution: "The event loop handles async operations in Node.js. Example: `setTimeout(() => console.log('Hi'), 1000);` runs after 1s." },
    { id: 2, text: "What is Node.js?", keywords: ["node", "runtime"], solution: "A JavaScript runtime using V8. Example: `console.log('Hello');` runs outside browser." },
    { id: 3, text: "What is `require` in Node.js?", keywords: ["require", "module"], solution: "Imports modules. Example: `const fs = require('fs');`." },
    { id: 4, text: "What is the `fs` module?", keywords: ["fs", "file"], solution: "Handles file system. Example: `fs.readFile('file.txt', (err, data) => console.log(data));`." },
    { id: 5, text: "What is `process` in Node.js?", keywords: ["process", "global"], solution: "Provides info about the process. Example: `console.log(process.env.NODE_ENV);`." },
    { id: 6, text: "What is `npm`?", keywords: ["npm", "package"], solution: "Node Package Manager. Example: `npm install express` adds a dependency." },
    { id: 7, text: "What is a callback in Node.js?", keywords: ["callback", "async"], solution: "A function passed as an argument. Example: `fs.readFile('file', (err, data) => {});`." },
    { id: 8, text: "What is `async/await` in Node.js?", keywords: ["async", "await"], solution: "Simplifies async code. Example: `async function read() { const data = await fs.promises.readFile('file'); }`." },
    { id: 9, text: "What is the `http` module?", keywords: ["http", "server"], solution: "Creates HTTP servers. Example: `http.createServer((req, res) => res.end('Hi'));`." },
    { id: 10, text: "What is `Buffer` in Node.js?", keywords: ["buffer", "data"], solution: "Handles binary data. Example: `const buf = Buffer.from('Hi'); console.log(buf);`." },
    { id: 11, text: "What is `EventEmitter`?", keywords: ["event", "emitter"], solution: "Handles events. Example: `const EventEmitter = require('events'); const ee = new EventEmitter(); ee.on('event', () => console.log('Hi'));`." },
    { id: 12, text: "What is a Node.js module?", keywords: ["module", "export"], solution: "Reusable code. Example: `module.exports = { x: 1 };`." },
    { id: 13, text: "What is `path` module?", keywords: ["path", "file"], solution: "Handles file paths. Example: `path.join(__dirname, 'file.txt');`." },
    { id: 14, text: "What is `cluster` module?", keywords: ["cluster", "multi"], solution: "Uses multiple CPU cores. Example: `if (cluster.isMaster) cluster.fork();`." },
    { id: 15, text: "What is `stream` in Node.js?", keywords: ["stream", "data"], solution: "Handles data in chunks. Example: `fs.createReadStream('file.txt');`." },
    { id: 16, text: "What is `package.json`?", keywords: ["package", "json"], solution: "Defines project metadata. Example: `{ 'name': 'app', 'dependencies': { 'express': '^4.0' } }`." },
    { id: 17, text: "What is `nodemon`?", keywords: ["nodemon", "tool"], solution: "Restarts server on changes. Example: `nodemon app.js`." },
    { id: 18, text: "What is the difference between `process.nextTick` and `setImmediate`?", keywords: ["nextTick", "setImmediate"], solution: "`nextTick` runs before I/O, `setImmediate` after. Example: `process.nextTick(() => console.log('Next'));`." },
    { id: 19, text: "What is `child_process`?", keywords: ["child", "process"], solution: "Runs subprocesses. Example: `const { exec } = require('child_process'); exec('ls', (err, stdout) => console.log(stdout));`." },
    { id: 20, text: "What is `pm2`?", keywords: ["pm2", "management"], solution: "A process manager for Node.js. Example: `pm2 start app.js`." },
  ],
  expressjs: [
    { id: 1, text: "How do you create a route in Express?", keywords: ["route", "express"], solution: "Use `app.get()`. Example: `app.get('/home', (req, res) => res.send('Home'));`." },
    { id: 2, text: "What is Express.js?", keywords: ["express", "framework"], solution: "A web framework for Node.js. Example: `const express = require('express'); const app = express();`." },
    { id: 3, text: "What is middleware in Express?", keywords: ["middleware", "request"], solution: "Functions processing requests. Example: `app.use((req, res, next) => next());`." },
    { id: 4, text: "How do you handle POST requests?", keywords: ["post", "request"], solution: "Use `app.post()`. Example: `app.post('/data', (req, res) => res.send(req.body));`." },
    { id: 5, text: "What is `req.params`?", keywords: ["params", "route"], solution: "Accesses route parameters. Example: `app.get('/user/:id', (req, res) => res.send(req.params.id));`." },
    { id: 6, text: "What is `req.query`?", keywords: ["query", "request"], solution: "Accesses query strings. Example: `app.get('/search', (req, res) => res.send(req.query.q)); // ?q=hi`." },
    { id: 7, text: "How do you serve static files?", keywords: ["static", "files"], solution: "Use `express.static`. Example: `app.use(express.static('public'));`." },
    { id: 8, text: "What is `res.json`?", keywords: ["json", "response"], solution: "Sends JSON response. Example: `res.json({ success: true });`." },
    { id: 9, text: "How do you handle errors in Express?", keywords: ["error", "middleware"], solution: "Use error middleware. Example: `app.use((err, req, res, next) => res.status(500).send('Error'));`." },
    { id: 10, text: "What is `app.listen`?", keywords: ["listen", "server"], solution: "Starts the server. Example: `app.listen(3000, () => console.log('Running'));`." },
    { id: 11, text: "What is route middleware?", keywords: ["route", "middleware"], solution: "Middleware for specific routes. Example: `app.get('/admin', auth, (req, res) => res.send('Admin'));`." },
    { id: 12, text: "How do you parse request bodies?", keywords: ["body", "parse"], solution: "Use `express.json()`. Example: `app.use(express.json());`." },
    { id: 13, text: "What is `res.status`?", keywords: ["status", "response"], solution: "Sets HTTP status. Example: `res.status(404).send('Not Found');`." },
    { id: 14, text: "What is Express Router?", keywords: ["router", "express"], solution: "Modular routing. Example: `const router = express.Router(); router.get('/route', fn); app.use(router);`." },
    { id: 15, text: "How do you handle 404 errors?", keywords: ["404", "error"], solution: "Add catch-all route. Example: `app.use((req, res) => res.status(404).send('Not Found'));`." },
    { id: 16, text: "What is `req.body`?", keywords: ["body", "request"], solution: "Accesses POST data. Example: `app.post('/submit', (req, res) => res.send(req.body));`." },
    { id: 17, text: "How do you set headers in Express?", keywords: ["header", "response"], solution: "Use `res.set()`. Example: `res.set('Content-Type', 'application/json');`." },
    { id: 18, text: "What is `next` in Express?", keywords: ["next", "middleware"], solution: "Passes control to next middleware. Example: `(req, res, next) => next();`." },
    { id: 19, text: "How do you use templates in Express?", keywords: ["template", "engine"], solution: "Use engines like Pug. Example: `app.set('view engine', 'pug'); res.render('index');`." },
    { id: 20, text: "What is `express-session`?", keywords: ["session", "express"], solution: "Manages sessions. Example: `app.use(session({ secret: 'key' }));`." },
  ],
  redux: [
    { id: 1, text: "What is Redux’s single source of truth?", keywords: ["redux", "state"], solution: "Redux stores all app state in one object. Example: `{ user: {}, cart: [] }` managed by a store." },
    { id: 2, text: "What is Redux?", keywords: ["redux", "state"], solution: "A state management library. Example: `const store = createStore(reducer);`." },
    { id: 3, text: "What is an action?", keywords: ["action", "redux"], solution: "A payload describing change. Example: `{ type: 'ADD', payload: 1 }`." },
    { id: 4, text: "What is a reducer?", keywords: ["reducer", "state"], solution: "A function updating state. Example: `(state, action) => action.type === 'ADD' ? state + 1 : state`." },
    { id: 5, text: "What is `dispatch`?", keywords: ["dispatch", "action"], solution: "Sends actions to the store. Example: `store.dispatch({ type: 'ADD' });`." },
    { id: 6, text: "What is `connect` in Redux?", keywords: ["connect", "react"], solution: "Connects React to Redux. Example: `connect(mapState)(Component);`." },
    { id: 7, text: "What is `mapStateToProps`?", keywords: ["mapState", "props"], solution: "Maps state to props. Example: `mapStateToProps = state => ({ count: state.count });`." },
    { id: 8, text: "What is `mapDispatchToProps`?", keywords: ["mapDispatch", "props"], solution: "Maps dispatch to props. Example: `mapDispatchToProps = { add: () => ({ type: 'ADD' }) };`." },
    { id: 9, text: "What is middleware in Redux?", keywords: ["middleware", "redux"], solution: "Extends Redux. Example: `applyMiddleware(thunk)(createStore);`." },
    { id: 10, text: "What is Redux Thunk?", keywords: ["thunk", "async"], solution: "Handles async actions. Example: `const fetchData = () => dispatch => fetch(url).then(res => dispatch({ type: 'DATA', payload: res }));`." },
    { id: 11, text: "What is `combineReducers`?", keywords: ["combine", "reducers"], solution: "Merges reducers. Example: `combineReducers({ user, cart })`." },
    { id: 12, text: "What is the Redux store?", keywords: ["store", "state"], solution: "Holds app state. Example: `const store = createStore(reducer);`." },
    { id: 13, text: "What is a selector?", keywords: ["selector", "state"], solution: "Extracts state data. Example: `const getCount = state => state.count;`." },
    { id: 14, text: "What is `useSelector`?", keywords: ["useSelector", "hook"], solution: "Accesses state in React. Example: `const count = useSelector(state => state.count);`." },
    { id: 15, text: "What is `useDispatch`?", keywords: ["useDispatch", "hook"], solution: "Dispatches actions in React. Example: `const dispatch = useDispatch(); dispatch({ type: 'ADD' });`." },
    { id: 16, text: "What is Redux Toolkit?", keywords: ["toolkit", "redux"], solution: "Simplifies Redux. Example: `configureStore({ reducer })`." },
    { id: 17, text: "What is immutability in Redux?", keywords: ["immutable", "state"], solution: "State isn’t mutated directly. Example: `return { ...state, count: state.count + 1 };`." },
    { id: 18, text: "What is `createSlice`?", keywords: ["createSlice", "toolkit"], solution: "Creates reducer and actions. Example: `createSlice({ name: 'counter', initialState: 0, reducers: { add(state) { return state + 1; } } })`." },
    { id: 19, text: "What is Redux DevTools?", keywords: ["devtools", "debug"], solution: "A tool for debugging Redux. Example: `composeWithDevTools(applyMiddleware())`." },
    { id: 20, text: "What is the difference between Redux and Context?", keywords: ["redux", "context"], solution: "Redux is for complex state, Context for simple. Example: Redux uses reducers, Context uses `useContext`." },
  ],
  mongodb: [
    { id: 1, text: "How do you query data in MongoDB?", keywords: ["query", "mongodb"], solution: "Use `find()`. Example: `db.users.find({ age: 25 })` retrieves users aged 25." },
    { id: 2, text: "What is MongoDB?", keywords: ["mongodb", "database"], solution: "A NoSQL database storing JSON-like documents. Example: `db.users.insert({ name: 'John' });`." },
    { id: 3, text: "What is a collection?", keywords: ["collection", "mongodb"], solution: "A group of documents, like a table. Example: `db.createCollection('users');`." },
    { id: 4, text: "What is a document?", keywords: ["document", "mongodb"], solution: "A single record in BSON. Example: `{ name: 'John', age: 30 }`." },
    { id: 5, text: "How do you insert data?", keywords: ["insert", "data"], solution: "Use `insertOne` or `insertMany`. Example: `db.users.insertOne({ name: 'John' });`." },
    { id: 6, text: "What is an index in MongoDB?", keywords: ["index", "performance"], solution: "Improves query speed. Example: `db.users.createIndex({ name: 1 });`." },
    { id: 7, text: "How do you update data?", keywords: ["update", "data"], solution: "Use `updateOne`. Example: `db.users.updateOne({ name: 'John' }, { $set: { age: 31 } });`." },
    { id: 8, text: "How do you delete data?", keywords: ["delete", "data"], solution: "Use `deleteOne`. Example: `db.users.deleteOne({ name: 'John' });`." },
    { id: 9, text: "What is the aggregation pipeline?", keywords: ["aggregation", "pipeline"], solution: "Processes data in stages. Example: `db.users.aggregate([{ $match: { age: 25 } }]);`." },
    { id: 10, text: "What is `_id` in MongoDB?", keywords: ["_id", "key"], solution: "A unique identifier. Example: `{_id: ObjectId('123'), name: 'John'}`." },
    { id: 11, text: "What is a replica set?", keywords: ["replica", "set"], solution: "A group of servers for redundancy. Example: Primary-secondary setup." },
    { id: 12, text: "How do you sort data?", keywords: ["sort", "data"], solution: "Use `sort()`. Example: `db.users.find().sort({ age: 1 });` (ascending)." },
    { id: 13, text: "What is `$lookup`?", keywords: ["lookup", "join"], solution: "Joins collections. Example: `{$lookup: { from: 'orders', localField: '_id', foreignField: 'userId', as: 'orders' }}`." },
    { id: 14, text: "What is sharding?", keywords: ["sharding", "scale"], solution: "Distributes data across servers. Example: Shard by `userId`." },
    { id: 15, text: "How do you limit results?", keywords: ["limit", "query"], solution: "Use `limit()`. Example: `db.users.find().limit(5);`." },
    { id: 16, text: "What is the difference between `find` and `findOne`?", keywords: ["find", "findOne"], solution: "`find` returns all matches, `findOne` the first. Example: `db.users.findOne({ name: 'John' });`." },
    { id: 17, text: "What is `$push`?", keywords: ["push", "array"], solution: "Adds to an array field. Example: `db.users.updateOne({ name: 'John' }, { $push: { skills: 'JS' } });`." },
    { id: 18, text: "What is the MongoDB shell?", keywords: ["shell", "cli"], solution: "A CLI for MongoDB. Example: `mongo` opens it." },
    { id: 19, text: "What is a capped collection?", keywords: ["capped", "collection"], solution: "Fixed-size collection. Example: `db.createCollection('logs', { capped: true, size: 1000 });`." },
    { id: 20, text: "What is Mongoose?", keywords: ["mongoose", "orm"], solution: "An ODM for MongoDB. Example: `const User = mongoose.model('User', schema);`." },
  ],
  mysql: [
    { id: 1, text: "What is a primary key in MySQL?", keywords: ["primary", "key"], solution: "A primary key uniquely identifies rows. Example: `CREATE TABLE users (id INT PRIMARY KEY, name VARCHAR(50));`." },
    { id: 2, text: "What is MySQL?", keywords: ["mysql", "database"], solution: "A relational database system. Example: `CREATE DATABASE mydb;`." },
    { id: 3, text: "What is a foreign key?", keywords: ["foreign", "key"], solution: "Links tables. Example: `CREATE TABLE orders (id INT, user_id INT, FOREIGN KEY (user_id) REFERENCES users(id));`." },
    { id: 4, text: "How do you create a table?", keywords: ["table", "create"], solution: "Use `CREATE TABLE`. Example: `CREATE TABLE users (id INT, name VARCHAR(50));`." },
    { id: 5, text: "How do you insert data?", keywords: ["insert", "data"], solution: "Use `INSERT INTO`. Example: `INSERT INTO users (id, name) VALUES (1, 'John');`." },
    { id: 6, text: "How do you query data?", keywords: ["query", "select"], solution: "Use `SELECT`. Example: `SELECT * FROM users WHERE id = 1;`." },
    { id: 7, text: "What is a JOIN?", keywords: ["join", "relation"], solution: "Combines tables. Example: `SELECT u.name, o.id FROM users u JOIN orders o ON u.id = o.user_id;`." },
    { id: 8, text: "What is an index?", keywords: ["index", "performance"], solution: "Speeds up queries. Example: `CREATE INDEX idx_name ON users(name);`." },
    { id: 9, text: "How do you update data?", keywords: ["update", "data"], solution: "Use `UPDATE`. Example: `UPDATE users SET name = 'Jane' WHERE id = 1;`." },
    { id: 10, text: "How do you delete data?", keywords: ["delete", "data"], solution: "Use `DELETE`. Example: `DELETE FROM users WHERE id = 1;`." },
    { id: 11, text: "What is a transaction?", keywords: ["transaction", "consistency"], solution: "Ensures data integrity. Example: `START TRANSACTION; UPDATE users SET name = 'John'; COMMIT;`." },
    { id: 12, text: "What is `GROUP BY`?", keywords: ["group", "aggregate"], solution: "Groups rows for aggregation. Example: `SELECT COUNT(*) FROM users GROUP BY age;`." },
    { id: 13, text: "What is `HAVING`?", keywords: ["having", "filter"], solution: "Filters grouped data. Example: `SELECT age FROM users GROUP BY age HAVING COUNT(*) > 1;`." },
    { id: 14, text: "What is a view?", keywords: ["view", "virtual"], solution: "A virtual table. Example: `CREATE VIEW user_view AS SELECT name FROM users;`." },
    { id: 15, text: "What is `ORDER BY`?", keywords: ["order", "sort"], solution: "Sorts results. Example: `SELECT * FROM users ORDER BY name ASC;`." },
    { id: 16, text: "What is a stored procedure?", keywords: ["procedure", "stored"], solution: "Precompiled SQL. Example: `DELIMITER // CREATE PROCEDURE GetUsers() BEGIN SELECT * FROM users; END //`." },
    { id: 17, text: "What is normalization?", keywords: ["normalize", "design"], solution: "Reduces redundancy. Example: Split `name, address` into separate tables." },
    { id: 18, text: "What is a trigger?", keywords: ["trigger", "event"], solution: "Auto-executes on events. Example: `CREATE TRIGGER log AFTER INSERT ON users FOR EACH ROW INSERT INTO logs VALUES (NEW.id);`." },
    { id: 19, text: "What is `LIMIT`?", keywords: ["limit", "query"], solution: "Restricts rows. Example: `SELECT * FROM users LIMIT 5;`." },
    { id: 20, text: "What is the difference between `INNER JOIN` and `LEFT JOIN`?", keywords: ["join", "inner"], solution: "`INNER JOIN` matches both tables, `LEFT JOIN` keeps all from left. Example: `SELECT * FROM users INNER JOIN orders` vs `LEFT JOIN`." },
  ],
};